{\rtf1\ansi\ansicpg1252\cocoartf2759
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 const video = document.getElementById('video');\
const resultDiv = document.getElementById('result');\
\
// Define colors for different predictions\
const colors = \{\
    good: 'green',\
    bad: 'red',\
    neutral: 'yellow'\
\};\
\
async function setupCamera() \{\
    const stream = await navigator.mediaDevices.getUserMedia(\{ video: true \});\
    video.srcObject = stream;\
    return new Promise((resolve) => \{\
        video.onloadedmetadata = () => \{\
            resolve();\
        \};\
    \});\
\}\
\
async function loadModel() \{\
    const modelURL = 'model/model.json';  // Path to your model\
    const model = await tf.loadGraphModel(modelURL);\
    return model;\
\}\
\
async function predict() \{\
    const model = await loadModel();\
    while (true) \{\
        // Get the image tensor from the video\
        const img = tf.browser.fromPixels(video);\
\
        // Perform prediction\
        const predictions = await model.executeAsync(img);\
        \
        // Assuming your model outputs an array of predictions with labels\
        // Adapt this according to your model's output\
        const label = predictions[0].argMax(-1).dataSync(); // Modify this line as needed\
        const labelText = mapLabelToText(label);\
\
        // Update the background color based on the prediction\
        document.body.style.backgroundColor = colors[labelText] || 'white';  // Default to white if labelText is not found\
\
        resultDiv.textContent = `Prediction: $\{labelText\}`;\
        \
        // Dispose of tensors to free up memory\
        tf.dispose([img, predictions]);\
\
        await new Promise((resolve) => setTimeout(resolve, 1000));  // Run predictions every second\
    \}\
\}\
\
// Map model output to text labels\
function mapLabelToText(label) \{\
    // Map your model's output to text labels\
    // For example, if your model outputs indices:\
    switch (label) \{\
        case 0: return 'good';    // Adjust indices according to your model's output\
        case 1: return 'bad';\
        case 2: return 'neutral';\
        default: return 'unknown';\
    \}\
\}\
\
async function main() \{\
    await setupCamera();\
    await predict();\
\}\
\
main();\
}